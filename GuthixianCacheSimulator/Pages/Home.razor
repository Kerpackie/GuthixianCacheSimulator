@page "/"
@using System.Collections.Generic
@using System.Linq

<h1>Divination XP Simulation (RS3)</h1>

<!-- Input Panel -->
<RadzenCard Style="margin-bottom:2rem;">
    <ChildContent>
        <RadzenRow>
            <RadzenColumn xs="12" sm="6" md="4">
                <RadzenLabel Text="Starting Level (optional)" />
                <RadzenNumeric @bind-Value="StartingLevel" Min="1" Max="120" Style="width:100%;" />
            </RadzenColumn>
            <RadzenColumn xs="12" sm="6" md="4">
                <RadzenLabel Text="Starting XP (optional)" />
                <RadzenNumeric @bind-Value="StartingXp" Min="0" Style="width:100%;" />
            </RadzenColumn>
            <RadzenColumn xs="12" sm="6" md="4">
                <RadzenLabel Text="Target Level" />
                <RadzenNumeric @bind-Value="TargetLevel" Min="1" Max="120" Style="width:100%;" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Class="align-items-center" Style="margin-top:1rem;">
            <!-- Align SimpleMode under first column, placeholder for second, MaxCaches under third -->
            <RadzenColumn xs="12" sm="6" md="4">
                <RadzenCheckBox @bind-Value="SimpleMode" Style="margin-right:0.5rem;" />
                <RadzenLabel Text="Simple Mode (2 caches/day, 100 points each)" />
            </RadzenColumn>
            <RadzenColumn xs="12" sm="6" md="4">
                <!-- placeholder column to keep alignment -->
            </RadzenColumn>
            <RadzenColumn xs="12" sm="6" md="4">
                <RadzenLabel Text="Max Caches/Day (1–24)" />
                <RadzenNumeric @bind-Value="MaxCachesPerDay" Min="1" Max="24" Style="width:100%;" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-top:1.5rem;">
            <RadzenColumn>
                <RadzenButton Text="Run Simulation" Click="RunSimulation" ButtonStyle="ButtonStyle.Primary" Style="width:150px;" />
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
</RadzenCard>

<!-- Results Table -->
@if (xpProgress.Any())
{
    <h4>Simulation Result</h4>
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-light">
                <tr>
                    <th>Day</th>
                    <th>Level Reached</th>
                    <th>XP Gained</th>
                    <th>Total XP</th>
                    <th>Caches Used</th>
                    <th>Points Used</th>
                    <th>Cache Points</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in xpProgress)
                {
                    <tr>
                        <td>@record.Day</td>
                        <td>@record.LevelReached</td>
                        <td>@record.XpGained</td>
                        <td>@record.TotalXp</td>
                        <td>@record.CachesUsed</td>
                        <td>@record.PointsUsed</td>
                        <td style="min-width:100px;">
                            <details>
                                <summary style="cursor:pointer;">Show</summary>
                                <ul class="ps-3 mb-0">
                                    @foreach (var pts in record.PointsPerCache)
                                    {
                                        <li>@pts points</li>
                                    }
                                </ul>
                            </details>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<SimulationRecord> xpProgress = new();
    private int StartingXp { get; set; } = 0;
    private int StartingLevel { get; set; } = 0;
    private int TargetLevel { get; set; } = 80;
    private bool SimpleMode { get; set; } = false;
    private int MaxCachesPerDay { get; set; } = 16;

    private void RunSimulation()
    {
        xpProgress = new List<SimulationRecord>();
        int[] xpTable = {

            0, 83, 174, 276, 388, 512, 650, 801, 969, 1154,

            1358, 1584, 1833, 2107, 2411, 2746, 3115, 3523, 3973, 4470,

            5018, 5624, 6291, 7028, 7842, 8740, 9730, 10824, 12031, 13363,

            14833, 16456, 18247, 20224, 22406, 24815, 27473, 30408, 33648, 37224,

            41171, 45529, 50339, 55649, 61512, 67983, 75127, 83014, 91721, 101333,

            111945, 123660, 136594, 150872, 166636, 184040, 203254, 224466, 247886, 273742,

            302288, 333804, 368599, 407015, 449428, 496254, 547953, 605032, 668051, 737627,

            814445, 899257, 992895, 1096278, 1210421, 1336443, 1475581, 1629200, 1798808, 1986068,

            2192818, 2418031, 2662543, 2927421, 3213794, 3522727, 3855184, 4212186, 4594931, 5003761,

            5439440, 5902922, 6394293, 6912742, 7458455, 8031860, 8633273, 9262273, 9919464, 10603996,

            11346831, 12123355, 12934646, 13781886, 14666191, 15588703, 16550592, 17553061, 18597327, 19684644,

            20816306, 21993641, 23218008, 24490807, 25813473, 27187474, 28614317, 30095550, 31632777, 33227639

        };



        Dictionary<int, int> xpPerPointData = new()

        {

            {1,33},{2,34},{3,35},{4,36},{5,36},{6,37},{7,38},{8,39},{9,40},{10,50},

            {11,51},{12,52},{13,53},{14,54},{15,55},{16,56},{17,57},{18,58},{19,58},{20,67},

            {21,68},{22,69},{23,70},{24,71},{25,73},{26,74},{27,75},{28,76},{29,77},{30,81},

            {31,84},{32,86},{33,90},{34,92},{35,95},{36,97},{37,100},{38,103},{39,105},{40,142},

            {41,144},{42,147},{43,150},{44,153},{45,156},{46,158},{47,161},{48,163},{49,166},{50,208},

            {51,213},{52,219},{53,225},{54,230},{55,236},{56,241},{57,246},{58,251},{59,256},{60,278},

            {61,285},{62,291},{63,298},{64,305},{65,311},{66,317},{67,323},{68,329},{69,334},{70,358},

            {71,368},{72,377},{73,386},{74,395},{75,404},{76,412},{77,420},{78,428},{79,435},{80,461},

            {81,470},{82,477},{83,482},{84,484},{85,509},{86,519},{87,527},{88,533},{89,536},{90,566},

            {91,579},{92,589},{93,595},{94,599},{95,679},{96,700},{97,716},{98,728},{99,734},

            {100,734},{101,734},{102,734},{103,734},{104,734},{105,734},{106,734},{107,734},{108,734},{109,734},

            {110,734},{111,734},{112,734},{113,734},{114,734},{115,734},{116,734},{117,734},{118,734},{119,734},{120,734}

        };
        const int MAX_POINTS_PER_DAY = 200;
        const int MAX_POINTS_PER_CACHE = 100;

        int safeStart = Math.Clamp(StartingLevel, 1, xpTable.Length - 1);
        int safeTarget = Math.Clamp(TargetLevel, 1, xpTable.Length - 1);
        int maxCaches = Math.Clamp(MaxCachesPerDay, 1, 24);
        int xp = StartingLevel > 0 ? xpTable[safeStart] : Math.Max(StartingXp, 0);
        int targetXp = xpTable[safeTarget];
        int day = 0;

        while (xp < targetXp)
        {
            int dailyXp = 0, dailyPts = 0, used = 0;
            var pointsList = new List<int>();
            if (SimpleMode)
            {
                used = 2;
                dailyPts = 200;
                pointsList.AddRange(new[]{100,100});
                int lvl = Math.Min(xpTable.TakeWhile(v=>xp>=v).Count(), 120);
                int ppp = xpPerPointData.GetValueOrDefault(lvl, 734);
                dailyXp = 200 * ppp;
                xp += dailyXp;
            }
            else
            {
                while (used < maxCaches && dailyPts < MAX_POINTS_PER_DAY && xp < targetXp)
                {
                    int lvl = Math.Min(xpTable.TakeWhile(v=>xp>=v).Count(), 120);
                    int ppp = xpPerPointData.GetValueOrDefault(lvl, 734);
                    int next = Math.Min(lvl, xpTable.Length - 1);
                    int needed = (xpTable[next] - xp + ppp - 1) / ppp;
                    int left = MAX_POINTS_PER_DAY - dailyPts;
                    int take = used == maxCaches - 2 && left > 100 ? Math.Min(MAX_POINTS_PER_CACHE, left - 100)
                             : used == maxCaches - 1 ? Math.Min(MAX_POINTS_PER_CACHE, left)
                             : Math.Min(Math.Min(MAX_POINTS_PER_CACHE, left), needed);
                    pointsList.Add(take);
                    int gain = take * ppp;
                    xp += gain;
                    dailyXp += gain;
                    dailyPts += take;
                    used++;
                }
            }
            int reached = xpTable.TakeWhile(v=>xp>=v).Count();
            xpProgress.Add(new SimulationRecord {
                Day = ++day,
                LevelReached = reached,
                XpGained = dailyXp,
                TotalXp = xp,
                CachesUsed = used,
                PointsUsed = dailyPts,
                PointsPerCache = pointsList
            });
        }
        StateHasChanged();
    }

    public class SimulationRecord
    {
        public int Day { get; set; }
        public int LevelReached { get; set; }
        public int XpGained { get; set; }
        public int TotalXp { get; set; }
        public int CachesUsed { get; set; }
        public int PointsUsed { get; set; }
        public List<int> PointsPerCache { get; set; } = new List<int>();
    }
}
